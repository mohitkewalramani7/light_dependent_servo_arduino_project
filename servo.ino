/**
 * Helper methods that assist with the rotating the Servo.
 * @author Mohit Kewalramani
 * @version 1.0
 * @published 2017-06-24
 */
 
/**
 * This method rotates the Servo 180 degrees forward, and 180 degrees
 * backward. The rotation is stalled by a delay. The delay is an integer
 * generated by the delayTime() method and is based on the resistance in
 * through the circuit with the attached light-dependent resistor.
 * 
 * @param delayValue The integer value to delay the rotation by. The value
 *    given is the value of milliseconds the rotation is stalled by
 */
void rotateServo(int delayValue){
    // Rotate from 0 -> 180 degrees
    for(int pos = 0; pos < 180; pos++){
      servo.write(pos);
      delay(delayValue);
    }

    // Rotate backwards from 180 -> 0 degrees
    for(int pos = 180; pos >= 1; pos--){
      servo.write(pos);
      delay(delayValue);
    }
}


/**
 * A function that generates the delay value that is generated (in milliseconds) 
 * based on the analog value of reading the resistance flowing through the circuit 
 * (light-dependent resistor present). 
 * 
 * @param range The constrained (0 <= i <= 700) value of the Analog output read 
 * from the circuit containing the light-dependent resistor
 * 
 * @return int The number of milliseconds with which to slow down each degree
 * rotation of the servo.
 */
int delayTime(int range){
  if (range > 600 && range <= 700){
    return 13;
  }
  else if (range > 500 && range <= 600){
    return 11;
  }
  else if (range > 400 && range <= 500){
    return 9;
  }
  else if (range > 300 && range <= 400){
    return 7;
  }
  else if (range > 200 && range <= 300){
    return 5;
  }
  else if (range > 100 && range <= 200){
    return 3;
  }
  else if (range > 0){
    return 1;
  }
  return 0;
}